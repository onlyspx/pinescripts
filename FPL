// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © OnlySPX
// FPL Cheatcode 

// @version=6
indicator("FPL Cheatcode", "Cheatcode", true)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

var DEFAULT_LINEWIDTH   = 1
var DEFAULT_COLOR1      = color.new(#c9daf8, 0)
var DEFAULT_COLOR2      = color.new(#a4c2f4, 4)
var DEFAULT_COLOR3      = color.new(#6d9eeb, 8)
var DEFAULT_COLOR4      = color.new(#3c78d8, 12)

// Hourly MAs colors
var DEFAULT_COLOR5      = color.new(#FFFF00, 0)  // 20 EMA
var DEFAULT_COLOR6      = color.new(#FFFF00, 8)  // 200 SMA

// Daily MAs colors
var DEFAULT_COLOR7      = color.new(#FF0000, 0)  // 20 EMA
var DEFAULT_COLOR8      = color.new(#FF0000, 8)  // 200 SMA

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

// Groups

g1 = "#1"
g2 = "#2"
g3 = "#3"
g4 = "#4"
g5 = "Hourly 20 EMA"
g6 = "Hourly 200 SMA"
g7 = "Daily 20 EMA"
g8 = "Daily 200 SMA"
g9 = "Preferences"


// Tooltips

tt_timeframe    = "You can display a Moving Average from a higher timeframe. " +
                     "Note: It will be automatically hidden when switching the chart to a timeframe higher than its timeframe."


// Inputs

// Default timeframe MAs
i_type_1        = input.string      ("SMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g1)
i_length1       = input.int         (50,     "Length", 1,                                            group=g1)
i_source1       = input             (close, "Source",                                               group=g1)
i_offset1       = input.int         (0,     "Offset",                                               group=g1)
i_timeframe1    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g1)

i_type_2        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g2)
i_length2       = input.int         (50,    "Length", 1,                                            group=g2)
i_source2       = input             (close, "Source",                                               group=g2)
i_offset2       = input.int         (0,     "Offset",                                               group=g2)
i_timeframe2    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g2)

i_type_3        = input.string      ("SMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g3)
i_length3       = input.int         (200,    "Length", 1,                                            group=g3)
i_source3       = input             (close, "Source",                                               group=g3)
i_offset3       = input.int         (0,     "Offset",                                               group=g3)
i_timeframe3    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g3)

i_type_4        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g4)
i_length4       = input.int         (200,   "Length", 1,                                            group=g4)
i_source4       = input             (close, "Source",                                               group=g4)
i_offset4       = input.int         (0,     "Offset",                                               group=g4)
i_timeframe4    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g4)


// Hourly MAs
i_type_5        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g5)
i_length5       = input.int         (20,    "Length", 1,                                            group=g5)
i_source5       = input             (close, "Source",                                               group=g5)
i_offset5       = input.int         (0,     "Offset",                                               group=g5)
i_timeframe5    = input.timeframe   ("60",  "Timeframe", tooltip=tt_timeframe,                      group=g5)

i_type_6        = input.string      ("SMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g6)
i_length6       = input.int         (200,   "Length", 1,                                            group=g6)
i_source6       = input             (close, "Source",                                               group=g6)
i_offset6       = input.int         (0,     "Offset",                                               group=g6)
i_timeframe6    = input.timeframe   ("60",  "Timeframe", tooltip=tt_timeframe,                      group=g6)

// Daily MAs
i_type_7        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g7)
i_length7       = input.int         (20,    "Length", 1,                                            group=g7)
i_source7       = input             (close, "Source",                                               group=g7)
i_offset7       = input.int         (0,     "Offset",                                               group=g7)
i_timeframe7    = input.timeframe   ("D",   "Timeframe", tooltip=tt_timeframe,                      group=g7)

i_type_8        = input.string      ("SMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g8)
i_length8       = input.int         (200,   "Length", 1,                                            group=g8)
i_source8       = input             (close, "Source",                                               group=g8)
i_offset8       = input.int         (0,     "Offset",                                               group=g8)
i_timeframe8    = input.timeframe   ("D",   "Timeframe", tooltip=tt_timeframe,                      group=g8)

i_enableGaps    = input             (true,  "Wait for timeframe closes",                            group=g9)

//#endregion


//--------------------------------------------------------------------
//#region                       Functions 
//--------------------------------------------------------------------

// @function Get the Moving Average (MA)
// @returns float
f_getMa(string _type, float _source, _length) =>
    switch _type
        "SMA"           => ta.sma(_source, _length)
        "EMA"           => ta.ema(_source, _length)
        "SMMA (RMA)"    => ta.rma(_source, _length)
        "WMA"           => ta.wma(_source, _length)
        "VWMA"          => ta.vwma(_source, _length)


// @function Check if a timeframe is higher or equal than the chart's one
// @returns bool
f_canDisplay(_tf) =>
    timeframe.in_seconds(_tf) >= timeframe.in_seconds()

//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------

var gaps = i_enableGaps ? barmerge.gaps_on : barmerge.gaps_off

// Default timeframe MAs
ma1 = request.security(syminfo.tickerid, i_timeframe1, f_getMa(i_type_1, i_source1, i_length1), gaps=gaps)      // Default MA 1
ma2 = request.security(syminfo.tickerid, i_timeframe2, f_getMa(i_type_2, i_source2, i_length2), gaps=gaps)      // Default MA 2
ma3 = request.security(syminfo.tickerid, i_timeframe3, f_getMa(i_type_3, i_source3, i_length3), gaps=gaps)      // Default MA 3
ma4 = request.security(syminfo.tickerid, i_timeframe4, f_getMa(i_type_4, i_source4, i_length4), gaps=gaps)      // Default MA 4

// Hourly MAs
ma5 = request.security(syminfo.tickerid, i_timeframe5, f_getMa(i_type_5, i_source5, i_length5), barmerge.gaps_off)      // Hourly MA
ma6 = request.security(syminfo.tickerid, i_timeframe6, f_getMa(i_type_6, i_source6, i_length6), barmerge.gaps_off)      // Hourly MA

// Daily MAs
var float ma7 = na
var float ma8 = na

[dailyClose, dailyTime] = request.security(syminfo.tickerid, "D", [close, time], barmerge.gaps_off)
if not na(dailyClose)
    ma7 := request.security(syminfo.tickerid, i_timeframe7, f_getMa(i_type_7, i_source7, i_length7), barmerge.gaps_off)     // Daily MA
    ma8 := request.security(syminfo.tickerid, i_timeframe8, f_getMa(i_type_8, i_source8, i_length8), barmerge.gaps_off)     // Daily MA

if barstate.islastconfirmedhistory
    ma7 := f_getMa(i_type_7, close, i_length7)     // Update with last confirmed bar
    ma8 := f_getMa(i_type_8, close, i_length8)     // Update with last confirmed bar

//#endregion


//--------------------------------------------------------------------
//#region                   Plotting & styling
//--------------------------------------------------------------------

// Plot MAs
plot(f_canDisplay(i_timeframe1) ? ma1 : na, "MA #1", DEFAULT_COLOR1, DEFAULT_LINEWIDTH, offset=i_offset1)
plot(f_canDisplay(i_timeframe2) ? ma2 : na, "MA #2", DEFAULT_COLOR2, DEFAULT_LINEWIDTH, offset=i_offset2)
plot(f_canDisplay(i_timeframe3) ? ma3 : na, "MA #3", DEFAULT_COLOR3, DEFAULT_LINEWIDTH, offset=i_offset3)
plot(f_canDisplay(i_timeframe4) ? ma4 : na, "MA #4", DEFAULT_COLOR4, DEFAULT_LINEWIDTH, offset=i_offset4)

// Plot hourly MAs
plot(f_canDisplay(i_timeframe5) ? ma5 : na, "Hourly Fast MA", DEFAULT_COLOR5, DEFAULT_LINEWIDTH, offset=i_offset5)
plot(f_canDisplay(i_timeframe6) ? ma6 : na, "Hourly Slow MA", DEFAULT_COLOR6, DEFAULT_LINEWIDTH, offset=i_offset6)

// Plot daily MAs
plot(f_canDisplay(i_timeframe7) ? ma7 : na, "Daily Fast MA", DEFAULT_COLOR7, DEFAULT_LINEWIDTH, offset=i_offset7)
plot(f_canDisplay(i_timeframe8) ? ma8 : na, "Daily Slow MA", DEFAULT_COLOR8, DEFAULT_LINEWIDTH, offset=i_offset8)

//#endregion
